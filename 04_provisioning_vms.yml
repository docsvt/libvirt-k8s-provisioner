---
- name: This play provisions k8s VMs based on intial config
  hosts: vm_host
  vars_files:
    - vars/k8s_cluster.yml
  tasks:
    - name: Enumerate Nodes
      ansible.builtin.set_fact:
        cp_nodes_count: "{{ k8s.control_plane.vms }}"
        worker_nodes_count: "{{ k8s.worker_nodes.vms - (rook_ceph.rook_cluster_size if rook_ceph.install_rook else 0) }}"
        rook_nodes_count: "{{ rook_ceph.rook_cluster_size if rook_ceph.install_rook else 0 }}"
    - name: Ensure control plane VMs are in place
      community.general.terraform:
        complex_vars: true
        project_path: "{{ workspace_directory.base_path }}/clusters/{{ k8s.cluster_name | default('k8s-test', true) }}"
        force_init: true
        targets:
          - module.master_nodes
        variables:
          pool_name: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          network_name: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_hostname: "{{ k8s.cluster_name | default('k8s-test', true) }}-master"
          instance_domain: "{{ k8s.network.domain | default('k8s.test', true) }}"
          instance_libvirt_network: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_libvirt_pool: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_volume_size: "{{ k8s.control_plane.disk }}"
          instance_cpu: "{{ k8s.control_plane.vcpu }}"
          instance_memory: "{{ k8s.control_plane.mem }}"
          instance_count: "{{ k8s.control_plane.vms }}"
          instance_cloud_image: "/tmp/{{ image_name }}.qcow2"
          instance_uefi_enabled: "{{ false if k8s.cluster_os == 'CentOS' else true }}"
          instance_cloud_user:
            username: "sysadmin"
            password: "$6$rounds=4096$81l4sZd3qjK9Sf8h$0aF.q8JDn98uw2SZLk58rm7gOA2HwgWmy/2ZlT3pJNU2PDAxzT5wS3uF3WlvSLvlnyrg2EtybwUtJytez3VEw0"
            sshkey: "{{ k8s_key_pub | trim }}"
        state: present
      become: true
      register: output_masters

    - name: Ensure worker VMs are in place
      community.general.terraform:
        complex_vars: true
        project_path: "{{ workspace_directory.base_path }}/clusters/{{ k8s.cluster_name | default('k8s-test', true) }}"
        force_init: true
        targets:
          - module.worker_nodes
        variables:
          pool_name: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          network_name: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_hostname: "{{ k8s.cluster_name | default('k8s-test', true) }}-worker"
          instance_domain: "{{ k8s.network.domain | default('k8s.test', true) }}"
          instance_libvirt_network: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_libvirt_pool: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_volume_size: "{{ k8s.worker_nodes.disk }}"
          instance_cpu: "{{ k8s.worker_nodes.vcpu }}"
          instance_memory: "{{ k8s.worker_nodes.mem }}"
          instance_count: "{{ (k8s.worker_nodes.vms - rook_ceph.rook_cluster_size) if rook_ceph.install_rook else k8s.worker_nodes.vms }}"
          instance_uefi_enabled: "{{ false if k8s.cluster_os == 'CentOS' else true }}"
          instance_cloud_image: "/tmp/{{ image_name }}.qcow2"
          instance_cloud_user:
            username: "sysadmin"
            password: "$6$rounds=4096$81l4sZd3qjK9Sf8h$0aF.q8JDn98uw2SZLk58rm7gOA2HwgWmy/2ZlT3pJNU2PDAxzT5wS3uF3WlvSLvlnyrg2EtybwUtJytez3VEw0"
            sshkey: "{{ k8s_key_pub | trim }}"
        state: present
      become: true
      register: output_workers

    - name: Ensure Rook dedicated worker VMs are in place
      community.general.terraform:
        project_path: "{{ workspace_directory.base_path }}/clusters/{{ k8s.cluster_name | default('k8s-test', true) }}"
        complex_vars: true
        force_init: true
        targets:
          - module.worker_nodes_rook
        variables:
          pool_name: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          network_name: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_hostname: "{{ k8s.cluster_name | default('k8s-test', true) }}-worker-rook"
          instance_domain: "{{ k8s.network.domain | default('k8s.test', true) }}"
          instance_libvirt_network: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_libvirt_pool: "{{ k8s.cluster_name | default('k8s-test', true) }}"
          instance_volume_size: "{{ k8s.worker_nodes.disk }}"
          instance_cpu: "{{ k8s.worker_nodes.vcpu }}"
          instance_memory: "{{ k8s.worker_nodes.mem }}"
          instance_count: "{{ rook_ceph.rook_cluster_size }}"
          instance_uefi_enabled: "{{ false if k8s.cluster_os == 'CentOS' else true }}"
          instance_cloud_image: "/tmp/{{ image_name }}.qcow2"
          instance_additional_volume_size: "{{ rook_ceph.volume_size }}"
          instance_cloud_user:
            username: "sysadmin"
            password: "$6$rounds=4096$81l4sZd3qjK9Sf8h$0aF.q8JDn98uw2SZLk58rm7gOA2HwgWmy/2ZlT3pJNU2PDAxzT5wS3uF3WlvSLvlnyrg2EtybwUtJytez3VEw0"
            sshkey: "{{ k8s_key_pub | trim }}"
        state: present
      register: output_workers_rook
      become: true
      when: rook_ceph.install_rook

    - name: Add masters to given group # noqa line-length
      ansible.builtin.add_host:
        hostname: "{{ k8s.cluster_name | default('k8s-test', true) }}-master{{ '-' ~ item if cp_nodes_count | int > 1 else '' }}.{{ k8s.network.domain | default('k8s.test', true) }}"
        ansible_ssh_private_key_file: "{{ playbook_dir }}//id_rsa_{{ k8s.cluster_name | default('k8s-test', true) }}"
        ansible_user: kube
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        groups:
          - "masters"
        group_children: "k8s_nodes"
      loop: "{{ range(0, k8s.control_plane.vms) | list }}"
      delegate_to: localhost

    - name: Add workers to given group # noqa line-length
      ansible.builtin.add_host:
        hostname: "{{ k8s.cluster_name | default('k8s-test', true) }}-worker{{ '-' ~ item if worker_nodes_count | int > 1 else '' }}.{{ k8s.network.domain | default('k8s.test', true) }}"
        ansible_ssh_private_key_file: "{{ playbook_dir }}//id_rsa_{{ k8s.cluster_name | default('k8s-test', true) }}"
        ansible_user: kube
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        groups:
          - "workers"
        group_children: "k8s_nodes"
      loop: "{{ range(0, worker_nodes_count | int) | list }}"
      delegate_to: localhost

    - name: Add rook workers to given group # noqa line-length
      ansible.builtin.add_host:
        hostname: "{{ k8s.cluster_name | default('k8s-test', true) }}-worker-rook{{ '-' ~ item if rook_nodes_count | int  > 1 else '' }}.{{ k8s.network.domain | default('k8s.test', true) }}"
        ansible_ssh_private_key_file: "{{ playbook_dir }}//id_rsa_{{ k8s.cluster_name | default('k8s-test', true) }}"
        ansible_user: kube
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        groups:
          - "workers"
        group_children: "k8s_nodes"
      loop: "{{ range(0, rook_nodes_count | int ) | list }}"
      delegate_to: localhost
      when: rook_ceph.install_rook


    - name: Ensure to clean known_hosts
      ansible.builtin.known_hosts:
        host: "{{ item }}"
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ query('inventory_hostnames', 'all:!vm_host') }}"
      delegate_to: localhost

- name: Check connection and set facts
  hosts: masters,workers
  gather_facts: false
  tasks:
    - name: Wait 600 seconds for target connection to become reachable/usable
      ansible.builtin.wait_for_connection:
        timeout: 600
        delay: 0

    - name: Ping host to check status
      ansible.builtin.ping:

    - name: Add hosts to correct groups
      ansible.builtin.group_by:
        key: "{{ group_children }}"

    - name: Extract facts from setup
      ansible.builtin.setup:
      register: machine_facts

    - name: Set relevant facts for the host
      ansible.builtin.set_fact:
        host_ip: "{{ machine_facts.ansible_facts.ansible_default_ipv4.address }}"
        host_interface: "{{ machine_facts.ansible_facts.ansible_default_ipv4.interface }}"
        host_mac: "{{ machine_facts.ansible_facts.ansible_default_ipv4.macaddress }}"
        host_fqdn: "{{ machine_facts.ansible_facts.ansible_fqdn }}"
